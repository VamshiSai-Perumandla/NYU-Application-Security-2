
XSS Attack:
Issue Identified:
An XSS vulnerability was found in the gift.html page, specifically exploiting the director parameter. The attack vector used was:
http://127.0.0.1:8000/buy.html?director=%3Cscript%3Ealert(hello)%3C/script%3E

Root Cause:
This issue originated from the item-single.html file where the director parameter was marked with the safe filter of Django, disabling auto-escaping. This was evident in the code:
<p>Endorsed by {{director|safe}}!</p>

Resolution:
The fix involved removing the safe filter, changing the line to:
<p>Endorsed by {{director}}!</p>
This alteration ensures that input is auto-escaped, neutralizing the potential XSS threat.

CSRF Attack:
Issue Identified:
A Cross-Site Request Forgery (CSRF) vulnerability was exploited using a specially crafted HTML page named 'xsrf.html'. The attack manipulated form submissions, allowing unauthorized commands.

Root Cause:
The application lacked CSRF tokens, a crucial security measure to validate the authenticity of a request, making it vulnerable to such attacks.

Resolution:
The solution was implemented by embedding Django's {% csrf_token %} within the forms of gift.html and item-single.html, and employing the @csrf_protect decorator in views.py. These actions fortified the application against CSRF by validating requests using tokens.

SQL Injection:
Issue Identified:
An SQL Injection vulnerability was exploited to extract sensitive data, specifically hashed passwords. The attack was executed through a manipulated .gftcrd file containing the payload:
{"merchant_id": "NYU Apparel Card", "customer_id": "test2", "total_value": "1234", "records": [{"record_type": "amount_change", "amount_added": 2000, "signature": "f473054be372ba304427a9a13cc227c0' UNION Select password from LegacySite_user where LegacySite_user.username='admin';--"}]}

Root Cause:
The flaw was in the application's handling of the signature variable within the views.py file, where the input was directly used in an SQL query without proper sanitization or parameterization.

Resolution:
The fix was implemented by adapting the SQL query to use parameterized statements, thereby preventing the input from being interpreted as part of the query. This step effectively mitigates the risk of SQL Injection.

Code Injection:
Issue Identified:
A code injection vulnerability was discovered in the file upload feature on the use.html page. The successful attack vector was the command appsec & touch test.txt ;, which led to unauthorized file creation on the server.

Root Cause:
The vulnerability stemmed from insufficient validation of the card_fname input, allowing attackers to execute arbitrary system commands through command injection.

Resolution:
To resolve this, stringent input validation was introduced, ensuring card_fname consists solely of alphanumeric characters by utilizing the isalnum() function. This measure prevents malicious code from being executed, securing the application from code injection threats.